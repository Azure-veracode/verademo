trigger:
- main

pool:
  vmImage: ubuntu-latest

resources:
- repo: self

variables:
  tag: 'latest'
  containerRegistry: 'azureprivaterepo'
  dockerrepo: 'veracodereg.azurecr.io'

steps:
  - task: Bash@3
    displayName: tf Scanner
    inputs:
      targetType: inline
      script: |
        pwd
        export VERACODE_API_KEY_ID=$(VERACODE_API_ID)
        export VERACODE_API_KEY_SECRET=$(VERACODE_API_KEY)
        curl -fsS https://tools.veracode.com/veracode-cli/install | sh
        ./veracode scan --type image --source alpine:latest --format json --output container-scan-docker.json
        
        # Optional: Save the JSON file as a build artifact
        # echo "##vso[task.uploadfile]container-scan-docker.json"

  - task: Bash@3
    displayName: Parse Veracode JSON Results
    inputs:
      targetType: inline
      script: |
        # Define the list of vulnerabilities to ignore
        ignore_list=(
          "docker.rego failed - 4.9 Ensure COPY is used instead of ADD in Dockerfile (Not Scored) level 1"
          "docker.rego failed - 4.6 Ensure HEALTHCHECK instructions have been added to the container image (Scored) level 1"
          "docker.rego failed - 4.1 Ensure a user for the container has been created (Scored) level 1"
          # Add more vulnerabilities to ignore here
        )

        # Parse JSON results and filter out ignored vulnerabilities
        failures=$(jq -r '.["policy-results"][] | .failures[] | @base64' container-scan-docker.json)

        # Function to check if a vulnerability is in the ignore list
        is_ignored() {
          local msg="$1"
          for ignored_vuln in "${ignore_list[@]}"; do
            if [[ "$msg" == "$ignored_vuln" ]]; then
              return 0
            fi
          done
          return 1
        }

        # Loop through the failures and check if any are not ignored
        non_ignored_found=false
        for failure in $failures; do
          decoded_msg=$(echo $failure | base64 --decode | jq -r '.msg')
          
          if ! is_ignored "$decoded_msg"; then
            echo "Non-ignored vulnerability found: $decoded_msg"
            non_ignored_found=true
          else
            echo "Ignored vulnerability: $decoded_msg"
          fi
        done

        # Fail the pipeline if there are non-ignored vulnerabilities
        if [ "$non_ignored_found" = true ]; then
          exit 1
        else
          echo "All remaining vulnerabilities are ignored. Policy passed."
          exit 0
        fi
